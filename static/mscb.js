var MSCB_DEFINES = {
	// Address 
	'CMD_ADDR_NODE8':  			0x09,
	'CMD_ADDR_NODE16': 			0x0A,
	'CMD_ADDR_BC':     			0x10,
	'CMD_ADDR_GRP8':   			0x11,
	'CMD_ADDR_GRP16':  			0x12,
	'CMD_PING8':       			0x19,
	'CMD_PING16':      			0x1A,
	// Node
	'CMD_INIT':        			0x20,
	'CMD_GET_INFO_GENERAL':  	0x28,
	'CMD_GET_INFO_VAR':  		0x29,
	'CMD_SET_ADDR':    			0x33,
	'CMD_SET_NAME':    			0x37,
	'CMD_SET_BAUD':    			0x39,
	'CMD_FREEZE':      			0x41,
	'CMD_SYNC':        			0x49,
	'CMD_SET_TIME':    			0x4E,
	'CMD_UPGRADE':     			0x50,
	'CMD_ECHO':					0x61,			
	'CMD_TOKEN':       			0x68,
	'CMD_GET_UPTIME':  			0x70,			
	'CMD_USER':        			0x58,
	'CMD_WRITE_NA':    			0x80,
	'CMD_WRITE_ACK':   			0x88,
	'CMD_FLASH':       			0x98,
	'CMD_READ_VAR':    			0xA1,				
	'CMD_READ_VARS':   			0xA2,
	'CMD_WRITE_RANGE': 			0xAF,	
	// Response
	'CMD_ACK':         			0x78,
	'CMD_NACK':		 			0xFF,
	
	// Flags
	'MSCBF_FLOAT':    			0x01,   // channel in floating point format
	'MSCBF_SIGNED':   			0x02,   // channel is signed integer
	'MSCBF_DATALESS': 			0x04,   // channel doesn't contain data
	'MSCBF_HIDDEN':   			0x08,   // used for internal config parameters
	'MSCBF_REMIN':    			0x10,   // get variable from remote node on subbus
	'MSCBF_REMOUT':   			0x20,   // send variable to remote node on subbus
	'MSCBF_INVALID':  			0x40,   // cannot read remote variable
	'MSCBF_NOSTORE':  			0x80,	// do not save/restore variable in flash

// physical units

	'PRFX_PICO':       -12,
	'PRFX_NANO':        -9,
	'PRFX_MICRO':       -6,
	'PRFX_MILLI':       -3,
	'PRFX_NONE':         0,
	'PRFX_KILO':         3,
	'PRFX_MEGA':         6,
	'PRFX_GIGA':         9,
	'PRFX_TERA':        12,

	'UNIT_UNDEFINED':    0,

	// SI base units
	'UNIT_METER':        1,
	'UNIT_GRAM':         2,
	'UNIT_SECOND':       3,
	'UNIT_MINUTE':       4,
	'UNIT_HOUR':         5,
	'UNIT_AMPERE':       6,
	'UNIT_KELVIN':       7,
	'UNIT_CELSIUS':      8,
	'UNIT_FARENHEIT':    9,

	// SI derived units
	'UNIT_HERTZ':       20,
	'UNIT_PASCAL':      21,
	'UNIT_BAR':         22,
	'UNIT_WATT':        23,
	'UNIT_VOLT':        24,
	'UNIT_OHM':         25,
	'UNIT_TESLA':       26,
	'UNIT_LITERPERSEC': 27,
	'UNIT_RPM':         28,
	'UNIT_FARAD':       29,
	'UNIT_JOULE':       30,

	// computer units
	'UNIT_BOOLEAN':     50,
	'UNIT_BYTE':        52,
	'UNIT_WORD':        53,
	'UNIT_DWORD':       54,
	'UNIT_ASCII':       55,
	'UNIT_STRING':      56,
	'UNIT_BAUD':        57,

	// others
	'UNIT_PERCENT':     90,
	'UNIT_PPM':         91,
	'UNIT_COUNT':       92,
	'UNIT_FACTOR':      93,
	'UNIT_DEGREE':		94,
};

var MSCB_CRC8_LOOKUP = [
	0x00, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83,
	0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41,
	0x9d, 0xc3, 0x21, 0x7f, 0xfc, 0xa2, 0x40, 0x1e,
	0x5f, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xdc,
	0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 0xa0,
	0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62,
	0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d,
	0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xff,
	0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5,
	0x84, 0xda, 0x38, 0x66, 0xe5, 0xbb, 0x59, 0x07,
	0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 0x06, 0x58,
	0x19, 0x47, 0xa5, 0xfb, 0x78, 0x26, 0xc4, 0x9a,
	0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6,
	0xa7, 0xf9, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24,
	0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b,
	0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9,
	0x8c, 0xd2, 0x30, 0x6e, 0xed, 0xb3, 0x51, 0x0f,
	0x4e, 0x10, 0xf2, 0xac, 0x2f, 0x71, 0x93, 0xcd,
	0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92,
	0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 0x0e, 0x50,
	0xaf, 0xf1, 0x13, 0x4d, 0xce, 0x90, 0x72, 0x2c,
	0x6d, 0x33, 0xd1, 0x8f, 0x0c, 0x52, 0xb0, 0xee,
	0x32, 0x6c, 0x8e, 0xd0, 0x53, 0x0d, 0xef, 0xb1,
	0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73,
	0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49,
	0x08, 0x56, 0xb4, 0xea, 0x69, 0x37, 0xd5, 0x8b,
	0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4,
	0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16,
	0xe9, 0xb7, 0x55, 0x0b, 0x88, 0xd6, 0x34, 0x6a,
	0x2b, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8,
	0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7,
	0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35,
];

// Data better be a DataView 
function MSCB_WriteVar( url, addr, var_id, data ) {					
	var data_to_send = new ArrayBuffer( data.byteLength + 7 );
	var dv 			 = new DataView( data_to_send );

	// Make Address Request
	dv.setUint8 ( 0, MSCB_DEFINES.CMD_ADDR_NODE16 );
	dv.setUint16( 1, addr );
	dv.setUint8 ( 3, MSCB_CRC8(new Uint8Array(data_to_send.slice(0,3)), 0) );
	
	// Make WriteVar Request 
	dv.setUint8( 4, MSCB_DEFINES.CMD_WRITE_ACK | (data.byteLength + 1) );
	dv.setUint8( 5, var_id );
	
	// Add Variable Data to Request 
	for(var n = 0; n < data.byteLength; n++) {
		dv.setUint8( 6+n, data.getUint8(n) );
	}
	
	// Generate CRC for WriteVar Request
	dv.setUint8( 6 + data.byteLength, MSCB_CRC8( new Uint8Array(data_to_send.slice(4, 6 + data.byteLength)),0 ) );
	
	// Fire off XHR to Server
	var oReq = new XMLHttpRequest();
	oReq.open("POST", url, true);
	oReq.responseType = "arraybuffer";

	oReq.onload = function (oEvent) {
		oReq.response;
	};

	oReq.send(data_to_send);	
}

function MSCB_CRC8( buffer, len, initial_crc ) {
	for(var i=0; i<buffer.byteLength; i++) {
		initial_crc = MSCB_CRC8_LOOKUP[buffer[i] ^ initial_crc];
	} 	
	return initial_crc;
}

function MSCB_CRC8_Add( crc, c ) {
	return MSCB_CRC8_LOOKUP[c ^ crc];
}